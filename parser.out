Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHECKEQUALS

Grammar

Rule 0     S' -> statement
Rule 1     statement -> command
Rule 2     statement -> equation
Rule 3     statement -> expression
Rule 4     command -> GENCOMMAND params
Rule 5     command -> GENCOMMAND
Rule 6     equation -> VAR DEFINEEQUALS expression
Rule 7     expression -> expression COMPOSE expression
Rule 8     expression -> LPAREN expression RPAREN
Rule 9     expression -> NEG expression
Rule 10    expression -> expression CONJ expression
Rule 11    expression -> expression COMMUTATOR expression
Rule 12    expression -> VAR
Rule 13    expression -> DEFCOMMAND args
Rule 14    word -> word APPLY expression
Rule 15    word -> BSTRING
Rule 16    args -> LPAREN params RPAREN
Rule 17    list -> LSQBRACKET params RSQBRACKET
Rule 18    params -> params COMMA param
Rule 19    params -> param
Rule 20    param -> list
Rule 21    param -> VAR
Rule 22    param -> NUMBER
Rule 23    param -> BSTRING

Terminals, with rules where they appear

APPLY                : 14
BSTRING              : 15 23
CHECKEQUALS          : 
COMMA                : 18
COMMUTATOR           : 11
COMPOSE              : 7
CONJ                 : 10
DEFCOMMAND           : 13
DEFINEEQUALS         : 6
GENCOMMAND           : 4 5
LPAREN               : 8 16
LSQBRACKET           : 17
NEG                  : 9
NUMBER               : 22
RPAREN               : 8 16
RSQBRACKET           : 17
VAR                  : 6 12 21
error                : 

Nonterminals, with rules where they appear

args                 : 13
command              : 1
equation             : 2
expression           : 3 6 7 7 8 9 10 10 11 11 14
list                 : 20
param                : 18 19
params               : 4 16 17 18
statement            : 0
word                 : 14

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . command
    (2) statement -> . equation
    (3) statement -> . expression
    (4) command -> . GENCOMMAND params
    (5) command -> . GENCOMMAND
    (6) equation -> . VAR DEFINEEQUALS expression
    (7) expression -> . expression COMPOSE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NEG expression
    (10) expression -> . expression CONJ expression
    (11) expression -> . expression COMMUTATOR expression
    (12) expression -> . VAR
    (13) expression -> . DEFCOMMAND args

    GENCOMMAND      shift and go to state 5
    VAR             shift and go to state 6
    LPAREN          shift and go to state 7
    NEG             shift and go to state 8
    DEFCOMMAND      shift and go to state 9

    statement                      shift and go to state 1
    command                        shift and go to state 2
    equation                       shift and go to state 3
    expression                     shift and go to state 4

state 1

    (0) S' -> statement .



state 2

    (1) statement -> command .

    $end            reduce using rule 1 (statement -> command .)


state 3

    (2) statement -> equation .

    $end            reduce using rule 2 (statement -> equation .)


state 4

    (3) statement -> expression .
    (7) expression -> expression . COMPOSE expression
    (10) expression -> expression . CONJ expression
    (11) expression -> expression . COMMUTATOR expression

    $end            reduce using rule 3 (statement -> expression .)
    COMPOSE         shift and go to state 10
    CONJ            shift and go to state 11
    COMMUTATOR      shift and go to state 12


state 5

    (4) command -> GENCOMMAND . params
    (5) command -> GENCOMMAND .
    (18) params -> . params COMMA param
    (19) params -> . param
    (20) param -> . list
    (21) param -> . VAR
    (22) param -> . NUMBER
    (23) param -> . BSTRING
    (17) list -> . LSQBRACKET params RSQBRACKET

    $end            reduce using rule 5 (command -> GENCOMMAND .)
    VAR             shift and go to state 16
    NUMBER          shift and go to state 17
    BSTRING         shift and go to state 18
    LSQBRACKET      shift and go to state 19

    params                         shift and go to state 13
    param                          shift and go to state 14
    list                           shift and go to state 15

state 6

    (6) equation -> VAR . DEFINEEQUALS expression
    (12) expression -> VAR .

    DEFINEEQUALS    shift and go to state 20
    COMPOSE         reduce using rule 12 (expression -> VAR .)
    CONJ            reduce using rule 12 (expression -> VAR .)
    COMMUTATOR      reduce using rule 12 (expression -> VAR .)
    $end            reduce using rule 12 (expression -> VAR .)


state 7

    (8) expression -> LPAREN . expression RPAREN
    (7) expression -> . expression COMPOSE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NEG expression
    (10) expression -> . expression CONJ expression
    (11) expression -> . expression COMMUTATOR expression
    (12) expression -> . VAR
    (13) expression -> . DEFCOMMAND args

    LPAREN          shift and go to state 7
    NEG             shift and go to state 8
    VAR             shift and go to state 22
    DEFCOMMAND      shift and go to state 9

    expression                     shift and go to state 21

state 8

    (9) expression -> NEG . expression
    (7) expression -> . expression COMPOSE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NEG expression
    (10) expression -> . expression CONJ expression
    (11) expression -> . expression COMMUTATOR expression
    (12) expression -> . VAR
    (13) expression -> . DEFCOMMAND args

    LPAREN          shift and go to state 7
    NEG             shift and go to state 8
    VAR             shift and go to state 22
    DEFCOMMAND      shift and go to state 9

    expression                     shift and go to state 23

state 9

    (13) expression -> DEFCOMMAND . args
    (16) args -> . LPAREN params RPAREN

    LPAREN          shift and go to state 25

    args                           shift and go to state 24

state 10

    (7) expression -> expression COMPOSE . expression
    (7) expression -> . expression COMPOSE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NEG expression
    (10) expression -> . expression CONJ expression
    (11) expression -> . expression COMMUTATOR expression
    (12) expression -> . VAR
    (13) expression -> . DEFCOMMAND args

    LPAREN          shift and go to state 7
    NEG             shift and go to state 8
    VAR             shift and go to state 22
    DEFCOMMAND      shift and go to state 9

    expression                     shift and go to state 26

state 11

    (10) expression -> expression CONJ . expression
    (7) expression -> . expression COMPOSE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NEG expression
    (10) expression -> . expression CONJ expression
    (11) expression -> . expression COMMUTATOR expression
    (12) expression -> . VAR
    (13) expression -> . DEFCOMMAND args

    LPAREN          shift and go to state 7
    NEG             shift and go to state 8
    VAR             shift and go to state 22
    DEFCOMMAND      shift and go to state 9

    expression                     shift and go to state 27

state 12

    (11) expression -> expression COMMUTATOR . expression
    (7) expression -> . expression COMPOSE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NEG expression
    (10) expression -> . expression CONJ expression
    (11) expression -> . expression COMMUTATOR expression
    (12) expression -> . VAR
    (13) expression -> . DEFCOMMAND args

    LPAREN          shift and go to state 7
    NEG             shift and go to state 8
    VAR             shift and go to state 22
    DEFCOMMAND      shift and go to state 9

    expression                     shift and go to state 28

state 13

    (4) command -> GENCOMMAND params .
    (18) params -> params . COMMA param

    $end            reduce using rule 4 (command -> GENCOMMAND params .)
    COMMA           shift and go to state 29


state 14

    (19) params -> param .

    COMMA           reduce using rule 19 (params -> param .)
    $end            reduce using rule 19 (params -> param .)
    RSQBRACKET      reduce using rule 19 (params -> param .)
    RPAREN          reduce using rule 19 (params -> param .)


state 15

    (20) param -> list .

    COMMA           reduce using rule 20 (param -> list .)
    $end            reduce using rule 20 (param -> list .)
    RSQBRACKET      reduce using rule 20 (param -> list .)
    RPAREN          reduce using rule 20 (param -> list .)


state 16

    (21) param -> VAR .

    COMMA           reduce using rule 21 (param -> VAR .)
    $end            reduce using rule 21 (param -> VAR .)
    RSQBRACKET      reduce using rule 21 (param -> VAR .)
    RPAREN          reduce using rule 21 (param -> VAR .)


state 17

    (22) param -> NUMBER .

    COMMA           reduce using rule 22 (param -> NUMBER .)
    $end            reduce using rule 22 (param -> NUMBER .)
    RSQBRACKET      reduce using rule 22 (param -> NUMBER .)
    RPAREN          reduce using rule 22 (param -> NUMBER .)


state 18

    (23) param -> BSTRING .

    COMMA           reduce using rule 23 (param -> BSTRING .)
    $end            reduce using rule 23 (param -> BSTRING .)
    RSQBRACKET      reduce using rule 23 (param -> BSTRING .)
    RPAREN          reduce using rule 23 (param -> BSTRING .)


state 19

    (17) list -> LSQBRACKET . params RSQBRACKET
    (18) params -> . params COMMA param
    (19) params -> . param
    (20) param -> . list
    (21) param -> . VAR
    (22) param -> . NUMBER
    (23) param -> . BSTRING
    (17) list -> . LSQBRACKET params RSQBRACKET

    VAR             shift and go to state 16
    NUMBER          shift and go to state 17
    BSTRING         shift and go to state 18
    LSQBRACKET      shift and go to state 19

    params                         shift and go to state 30
    param                          shift and go to state 14
    list                           shift and go to state 15

state 20

    (6) equation -> VAR DEFINEEQUALS . expression
    (7) expression -> . expression COMPOSE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NEG expression
    (10) expression -> . expression CONJ expression
    (11) expression -> . expression COMMUTATOR expression
    (12) expression -> . VAR
    (13) expression -> . DEFCOMMAND args

    LPAREN          shift and go to state 7
    NEG             shift and go to state 8
    VAR             shift and go to state 22
    DEFCOMMAND      shift and go to state 9

    expression                     shift and go to state 31

state 21

    (8) expression -> LPAREN expression . RPAREN
    (7) expression -> expression . COMPOSE expression
    (10) expression -> expression . CONJ expression
    (11) expression -> expression . COMMUTATOR expression

    RPAREN          shift and go to state 32
    COMPOSE         shift and go to state 10
    CONJ            shift and go to state 11
    COMMUTATOR      shift and go to state 12


state 22

    (12) expression -> VAR .

    RPAREN          reduce using rule 12 (expression -> VAR .)
    COMPOSE         reduce using rule 12 (expression -> VAR .)
    CONJ            reduce using rule 12 (expression -> VAR .)
    COMMUTATOR      reduce using rule 12 (expression -> VAR .)
    $end            reduce using rule 12 (expression -> VAR .)


state 23

    (9) expression -> NEG expression .
    (7) expression -> expression . COMPOSE expression
    (10) expression -> expression . CONJ expression
    (11) expression -> expression . COMMUTATOR expression

  ! shift/reduce conflict for COMPOSE resolved as shift
  ! shift/reduce conflict for CONJ resolved as shift
  ! shift/reduce conflict for COMMUTATOR resolved as shift
    $end            reduce using rule 9 (expression -> NEG expression .)
    RPAREN          reduce using rule 9 (expression -> NEG expression .)
    COMPOSE         shift and go to state 10
    CONJ            shift and go to state 11
    COMMUTATOR      shift and go to state 12

  ! COMPOSE         [ reduce using rule 9 (expression -> NEG expression .) ]
  ! CONJ            [ reduce using rule 9 (expression -> NEG expression .) ]
  ! COMMUTATOR      [ reduce using rule 9 (expression -> NEG expression .) ]


state 24

    (13) expression -> DEFCOMMAND args .

    COMPOSE         reduce using rule 13 (expression -> DEFCOMMAND args .)
    CONJ            reduce using rule 13 (expression -> DEFCOMMAND args .)
    COMMUTATOR      reduce using rule 13 (expression -> DEFCOMMAND args .)
    $end            reduce using rule 13 (expression -> DEFCOMMAND args .)
    RPAREN          reduce using rule 13 (expression -> DEFCOMMAND args .)


state 25

    (16) args -> LPAREN . params RPAREN
    (18) params -> . params COMMA param
    (19) params -> . param
    (20) param -> . list
    (21) param -> . VAR
    (22) param -> . NUMBER
    (23) param -> . BSTRING
    (17) list -> . LSQBRACKET params RSQBRACKET

    VAR             shift and go to state 16
    NUMBER          shift and go to state 17
    BSTRING         shift and go to state 18
    LSQBRACKET      shift and go to state 19

    params                         shift and go to state 33
    param                          shift and go to state 14
    list                           shift and go to state 15

state 26

    (7) expression -> expression COMPOSE expression .
    (7) expression -> expression . COMPOSE expression
    (10) expression -> expression . CONJ expression
    (11) expression -> expression . COMMUTATOR expression

  ! shift/reduce conflict for COMPOSE resolved as shift
  ! shift/reduce conflict for CONJ resolved as shift
  ! shift/reduce conflict for COMMUTATOR resolved as shift
    $end            reduce using rule 7 (expression -> expression COMPOSE expression .)
    RPAREN          reduce using rule 7 (expression -> expression COMPOSE expression .)
    COMPOSE         shift and go to state 10
    CONJ            shift and go to state 11
    COMMUTATOR      shift and go to state 12

  ! COMPOSE         [ reduce using rule 7 (expression -> expression COMPOSE expression .) ]
  ! CONJ            [ reduce using rule 7 (expression -> expression COMPOSE expression .) ]
  ! COMMUTATOR      [ reduce using rule 7 (expression -> expression COMPOSE expression .) ]


state 27

    (10) expression -> expression CONJ expression .
    (7) expression -> expression . COMPOSE expression
    (10) expression -> expression . CONJ expression
    (11) expression -> expression . COMMUTATOR expression

  ! shift/reduce conflict for COMPOSE resolved as shift
  ! shift/reduce conflict for CONJ resolved as shift
  ! shift/reduce conflict for COMMUTATOR resolved as shift
    $end            reduce using rule 10 (expression -> expression CONJ expression .)
    RPAREN          reduce using rule 10 (expression -> expression CONJ expression .)
    COMPOSE         shift and go to state 10
    CONJ            shift and go to state 11
    COMMUTATOR      shift and go to state 12

  ! COMPOSE         [ reduce using rule 10 (expression -> expression CONJ expression .) ]
  ! CONJ            [ reduce using rule 10 (expression -> expression CONJ expression .) ]
  ! COMMUTATOR      [ reduce using rule 10 (expression -> expression CONJ expression .) ]


state 28

    (11) expression -> expression COMMUTATOR expression .
    (7) expression -> expression . COMPOSE expression
    (10) expression -> expression . CONJ expression
    (11) expression -> expression . COMMUTATOR expression

  ! shift/reduce conflict for COMPOSE resolved as shift
  ! shift/reduce conflict for CONJ resolved as shift
  ! shift/reduce conflict for COMMUTATOR resolved as shift
    $end            reduce using rule 11 (expression -> expression COMMUTATOR expression .)
    RPAREN          reduce using rule 11 (expression -> expression COMMUTATOR expression .)
    COMPOSE         shift and go to state 10
    CONJ            shift and go to state 11
    COMMUTATOR      shift and go to state 12

  ! COMPOSE         [ reduce using rule 11 (expression -> expression COMMUTATOR expression .) ]
  ! CONJ            [ reduce using rule 11 (expression -> expression COMMUTATOR expression .) ]
  ! COMMUTATOR      [ reduce using rule 11 (expression -> expression COMMUTATOR expression .) ]


state 29

    (18) params -> params COMMA . param
    (20) param -> . list
    (21) param -> . VAR
    (22) param -> . NUMBER
    (23) param -> . BSTRING
    (17) list -> . LSQBRACKET params RSQBRACKET

    VAR             shift and go to state 16
    NUMBER          shift and go to state 17
    BSTRING         shift and go to state 18
    LSQBRACKET      shift and go to state 19

    param                          shift and go to state 34
    list                           shift and go to state 15

state 30

    (17) list -> LSQBRACKET params . RSQBRACKET
    (18) params -> params . COMMA param

    RSQBRACKET      shift and go to state 35
    COMMA           shift and go to state 29


state 31

    (6) equation -> VAR DEFINEEQUALS expression .
    (7) expression -> expression . COMPOSE expression
    (10) expression -> expression . CONJ expression
    (11) expression -> expression . COMMUTATOR expression

    $end            reduce using rule 6 (equation -> VAR DEFINEEQUALS expression .)
    COMPOSE         shift and go to state 10
    CONJ            shift and go to state 11
    COMMUTATOR      shift and go to state 12


state 32

    (8) expression -> LPAREN expression RPAREN .

    COMPOSE         reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    CONJ            reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    COMMUTATOR      reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 8 (expression -> LPAREN expression RPAREN .)


state 33

    (16) args -> LPAREN params . RPAREN
    (18) params -> params . COMMA param

    RPAREN          shift and go to state 36
    COMMA           shift and go to state 29


state 34

    (18) params -> params COMMA param .

    COMMA           reduce using rule 18 (params -> params COMMA param .)
    $end            reduce using rule 18 (params -> params COMMA param .)
    RSQBRACKET      reduce using rule 18 (params -> params COMMA param .)
    RPAREN          reduce using rule 18 (params -> params COMMA param .)


state 35

    (17) list -> LSQBRACKET params RSQBRACKET .

    COMMA           reduce using rule 17 (list -> LSQBRACKET params RSQBRACKET .)
    $end            reduce using rule 17 (list -> LSQBRACKET params RSQBRACKET .)
    RSQBRACKET      reduce using rule 17 (list -> LSQBRACKET params RSQBRACKET .)
    RPAREN          reduce using rule 17 (list -> LSQBRACKET params RSQBRACKET .)


state 36

    (16) args -> LPAREN params RPAREN .

    COMPOSE         reduce using rule 16 (args -> LPAREN params RPAREN .)
    CONJ            reduce using rule 16 (args -> LPAREN params RPAREN .)
    COMMUTATOR      reduce using rule 16 (args -> LPAREN params RPAREN .)
    $end            reduce using rule 16 (args -> LPAREN params RPAREN .)
    RPAREN          reduce using rule 16 (args -> LPAREN params RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMPOSE in state 23 resolved as shift
WARNING: shift/reduce conflict for CONJ in state 23 resolved as shift
WARNING: shift/reduce conflict for COMMUTATOR in state 23 resolved as shift
WARNING: shift/reduce conflict for COMPOSE in state 26 resolved as shift
WARNING: shift/reduce conflict for CONJ in state 26 resolved as shift
WARNING: shift/reduce conflict for COMMUTATOR in state 26 resolved as shift
WARNING: shift/reduce conflict for COMPOSE in state 27 resolved as shift
WARNING: shift/reduce conflict for CONJ in state 27 resolved as shift
WARNING: shift/reduce conflict for COMMUTATOR in state 27 resolved as shift
WARNING: shift/reduce conflict for COMPOSE in state 28 resolved as shift
WARNING: shift/reduce conflict for CONJ in state 28 resolved as shift
WARNING: shift/reduce conflict for COMMUTATOR in state 28 resolved as shift
